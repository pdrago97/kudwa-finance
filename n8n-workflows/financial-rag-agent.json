{
  "name": "Kudwa Financial RAG Agent",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "financial-query",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-financial-query",
      "name": "Financial Query Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [100, 200],
      "credentials": {
        "httpHeaderAuth": {
          "id": "financial-api-auth",
          "name": "Financial API Auth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse financial query and extract context\nconst inputData = $input.all()[0].json;\nconst query = inputData.body.query;\nconst entityTypes = inputData.body.entity_types || [];\nconst timeRange = inputData.body.time_range || 'all';\nconst userId = inputData.body.user_id;\n\n// Generate session ID for conversation tracking\nfunction generateUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nreturn [{\n  json: {\n    chatInput: query,\n    sessionId: `financial_${userId}_${generateUUID()}`,\n    entityTypes: entityTypes,\n    timeRange: timeRange,\n    userId: userId,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [300, 200],
      "id": "parse-financial-query",
      "name": "Parse Financial Query"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "query-input",
              "name": "chatInput",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            },
            {
              "id": "session-id",
              "name": "sessionId", 
              "value": "={{ $json.sessionId }}",
              "type": "string"
            },
            {
              "id": "entity-context",
              "name": "entityContext",
              "value": "={{ JSON.stringify($json.entityTypes) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "prepare-agent-input",
      "name": "Prepare Agent Input",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [500, 200]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "You are a specialized financial AI assistant for Kudwa's financial data processing system. You have access to comprehensive financial data including customers, companies, payments, contracts, roles, and transactions. Your responses should be:\n\n1. ACCURATE: Based only on the retrieved financial data\n2. INSIGHTFUL: Provide meaningful financial analysis and trends\n3. ACTIONABLE: Include specific recommendations when appropriate\n4. COMPLIANT: Consider regulatory and compliance implications\n\nEntity Context: {{ $json.entityContext }}\n\nWhen answering:\n- Use specific numbers and data points\n- Highlight trends and patterns\n- Identify potential risks or opportunities\n- Suggest follow-up actions\n- Reference relevant compliance considerations"
        }
      },
      "id": "financial-rag-agent",
      "name": "Financial RAG Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [700, 200]
    },
    {
      "parameters": {
        "model": "gpt-4-turbo-preview",
        "options": {
          "temperature": 0.1,
          "maxTokens": 2000
        }
      },
      "id": "openai-financial-model",
      "name": "OpenAI Financial Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [500, 100],
      "credentials": {
        "openAiApi": {
          "id": "openai-financial",
          "name": "OpenAI Financial Account"
        }
      }
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "financial-embeddings",
      "name": "Financial Embeddings",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [900, 100],
      "credentials": {
        "openAiApi": {
          "id": "openai-financial",
          "name": "OpenAI Financial Account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Financial entity database containing customers, companies, payments, contracts, roles, and transactions. Use this to retrieve specific financial data and relationships.",
        "tableName": {
          "__rl": true,
          "value": "entities",
          "mode": "list",
          "cachedResultName": "entities"
        },
        "useReranker": true,
        "options": {
          "topK": 10,
          "filter": "entity_type IN ('customer', 'company', 'payment', 'contract', 'role', 'transaction')"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [900, 200],
      "id": "financial-vector-store",
      "name": "Financial Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "supabase-financial",
          "name": "Supabase Financial Account"
        }
      }
    },
    {
      "parameters": {},
      "id": "financial-memory",
      "name": "Financial Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1,
      "position": [500, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-financial",
          "name": "Postgres Financial Account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.rerankerCohere",
      "typeVersion": 1,
      "position": [1100, 200],
      "id": "financial-reranker",
      "name": "Financial Reranker",
      "credentials": {
        "cohereApi": {
          "id": "cohere-financial",
          "name": "Cohere Financial Account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process agent response and add financial insights\nconst agentResponse = $('Financial RAG Agent').item.json.output;\nconst originalQuery = $('Parse Financial Query').item.json;\n\n// Extract key financial metrics if mentioned\nconst metrics = {\n  amounts: agentResponse.match(/\\$[\\d,]+(?:\\.\\d{2})?/g) || [],\n  percentages: agentResponse.match(/\\d+(?:\\.\\d+)?%/g) || [],\n  dates: agentResponse.match(/\\d{4}-\\d{2}-\\d{2}/g) || []\n};\n\n// Add metadata for dashboard generation\nconst responseData = {\n  response: agentResponse,\n  query: originalQuery.chatInput,\n  sessionId: originalQuery.sessionId,\n  userId: originalQuery.userId,\n  timestamp: new Date().toISOString(),\n  extractedMetrics: metrics,\n  suggestedActions: [], // Could be enhanced with NLP\n  dashboardHints: {\n    chartTypes: [], // Could suggest chart types based on response\n    entityTypes: originalQuery.entityTypes,\n    timeRange: originalQuery.timeRange\n  }\n};\n\nreturn [{ json: responseData }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300],
      "id": "process-financial-response",
      "name": "Process Financial Response"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "financial-response",
      "name": "Financial Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1100, 300]
    }
  ],
  "connections": {
    "Financial Query Webhook": {
      "main": [
        [
          {
            "node": "Parse Financial Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Financial Query": {
      "main": [
        [
          {
            "node": "Prepare Agent Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Agent Input": {
      "main": [
        [
          {
            "node": "Financial RAG Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Financial RAG Agent": {
      "main": [
        [
          {
            "node": "Process Financial Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Financial Model": {
      "ai_languageModel": [
        [
          {
            "node": "Financial RAG Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Financial Embeddings": {
      "ai_embedding": [
        [
          {
            "node": "Financial Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Financial Vector Store": {
      "ai_tool": [
        [
          {
            "node": "Financial RAG Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Financial Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Financial RAG Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Financial Reranker": {
      "ai_reranker": [
        [
          {
            "node": "Financial Vector Store",
            "type": "ai_reranker",
            "index": 0
          }
        ]
      ]
    },
    "Process Financial Response": {
      "main": [
        [
          {
            "node": "Financial Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true
  }
}
