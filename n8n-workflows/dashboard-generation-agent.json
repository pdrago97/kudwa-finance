{
  "name": "Kudwa Auto-Generated Dashboard Agent",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "entity-updates",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "entity-update-webhook",
      "name": "Entity Update Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [100, 200]
    },
    {
      "parameters": {
        "jsCode": "// Process entity update notifications and determine dashboard updates needed\nconst inputData = $input.all()[0].json;\nconst eventType = inputData.body.event_type;\nconst documentId = inputData.body.document_id;\nconst newEntities = JSON.parse(inputData.body.new_entities || '[]');\nconst ontologyUpdates = JSON.parse(inputData.body.ontology_updates || '{}');\n\n// Analyze what dashboard updates are needed\nconst entityTypes = [...new Set(newEntities.map(e => e.entity_type))];\nconst dashboardUpdatesNeeded = [];\n\n// Determine which dashboards need updates based on entity types\nentityTypes.forEach(entityType => {\n  switch(entityType) {\n    case 'customer':\n      dashboardUpdatesNeeded.push('customer_overview', 'revenue_analysis');\n      break;\n    case 'payment':\n      dashboardUpdatesNeeded.push('payment_flows', 'transaction_monitoring');\n      break;\n    case 'contract':\n      dashboardUpdatesNeeded.push('contract_management', 'compliance_tracking');\n      break;\n    case 'company':\n      dashboardUpdatesNeeded.push('company_profiles', 'relationship_mapping');\n      break;\n  }\n});\n\n// Generate dashboard update requests\nconst uniqueDashboards = [...new Set(dashboardUpdatesNeeded)];\n\nreturn [{\n  json: {\n    eventType: eventType,\n    documentId: documentId,\n    newEntities: newEntities,\n    ontologyUpdates: ontologyUpdates,\n    dashboardsToUpdate: uniqueDashboards,\n    updatePriority: newEntities.length > 5 ? 'high' : 'normal',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [300, 200],
      "id": "analyze-dashboard-updates",
      "name": "Analyze Dashboard Updates"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Based on the following financial entity updates, generate dashboard configurations and chart specifications:\n\nNew Entities: {{ JSON.stringify($json.newEntities) }}\nOntology Updates: {{ JSON.stringify($json.ontologyUpdates) }}\nDashboards to Update: {{ JSON.stringify($json.dashboardsToUpdate) }}\n\nFor each dashboard, provide:\n1. Chart type recommendations (bar, line, pie, scatter, etc.)\n2. Data aggregation methods\n3. Filter suggestions\n4. Key metrics to highlight\n5. Real-time update frequency\n\nFormat the response as JSON with dashboard configurations.",
        "options": {
          "systemMessage": "You are a specialized dashboard generation AI for financial data visualization. You understand financial entities, relationships, and create meaningful visualizations that provide business insights. Your responses should be practical, actionable dashboard configurations that can be implemented programmatically.\n\nConsider:\n- Financial KPIs and metrics\n- Regulatory compliance requirements\n- User experience and clarity\n- Real-time data requirements\n- Interactive filtering capabilities"
        }
      },
      "id": "dashboard-generation-agent",
      "name": "Dashboard Generation Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [500, 200]
    },
    {
      "parameters": {
        "model": "gpt-4-turbo-preview",
        "options": {
          "temperature": 0.2,
          "maxTokens": 3000
        }
      },
      "id": "dashboard-ai-model",
      "name": "Dashboard AI Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [300, 100],
      "credentials": {
        "openAiApi": {
          "id": "openai-financial",
          "name": "OpenAI Financial Account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse AI-generated dashboard configurations and prepare for database storage\nconst aiResponse = $('Dashboard Generation Agent').item.json.output;\nconst updateData = $('Analyze Dashboard Updates').item.json;\n\n// Parse the AI response (assuming it returns JSON)\nlet dashboardConfigs;\ntry {\n  // Extract JSON from AI response if it's wrapped in text\n  const jsonMatch = aiResponse.match(/```json\\s*([\\s\\S]*?)\\s*```/) || aiResponse.match(/{[\\s\\S]*}/);\n  dashboardConfigs = JSON.parse(jsonMatch ? jsonMatch[1] || jsonMatch[0] : aiResponse);\n} catch (error) {\n  // Fallback to mock configuration if parsing fails\n  dashboardConfigs = {\n    customer_overview: {\n      chartType: 'bar',\n      metrics: ['total_customers', 'new_customers_monthly'],\n      filters: ['customer_type', 'date_range'],\n      refreshFrequency: 'real_time'\n    }\n  };\n}\n\n// Prepare dashboard configurations for database storage\nconst dashboardInserts = Object.entries(dashboardConfigs).map(([dashboardName, config]) => ({\n  dashboard_name: dashboardName,\n  entity_types: updateData.newEntities.map(e => e.entity_type),\n  chart_configs: config,\n  filters: config.filters || {},\n  refresh_frequency: config.refreshFrequency || 'hourly',\n  created_by_agent: 'dashboard_generation_agent',\n  auto_generated: true,\n  created_at: new Date().toISOString(),\n  metadata: {\n    source_document_id: updateData.documentId,\n    generation_trigger: updateData.eventType,\n    ai_model: 'gpt-4-turbo-preview'\n  }\n}));\n\nreturn [{\n  json: {\n    dashboardConfigs: dashboardConfigs,\n    dashboardInserts: dashboardInserts,\n    updateData: updateData,\n    generationMetadata: {\n      dashboardsGenerated: Object.keys(dashboardConfigs).length,\n      timestamp: new Date().toISOString(),\n      aiModel: 'gpt-4-turbo-preview'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 200],
      "id": "process-dashboard-configs",
      "name": "Process Dashboard Configs"
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "dashboard_configs",
        "columns": {
          "mappingMode": "defineBelow",
          "value": "={{ $json.dashboardInserts }}"
        },
        "options": {
          "upsert": true
        }
      },
      "id": "store-dashboard-configs",
      "name": "Store Dashboard Configs",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [900, 200],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-financial",
          "name": "Supabase Financial Account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "http://localhost:3000/api/dashboards/refresh",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "dashboard_names",
              "value": "={{ JSON.stringify(Object.keys($json.dashboardConfigs)) }}"
            },
            {
              "name": "priority",
              "value": "={{ $json.updateData.updatePriority }}"
            },
            {
              "name": "trigger_event",
              "value": "entity_updates"
            }
          ]
        },
        "options": {}
      },
      "id": "trigger-dashboard-refresh",
      "name": "Trigger Dashboard Refresh",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1100, 200],
      "credentials": {
        "httpHeaderAuth": {
          "id": "frontend-api-auth",
          "name": "Frontend API Auth"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  success: true,\n  dashboardsUpdated: Object.keys($json.dashboardConfigs),\n  configurationsStored: $json.dashboardInserts.length,\n  generationMetadata: $json.generationMetadata\n}) }}",
        "options": {}
      },
      "id": "dashboard-response",
      "name": "Dashboard Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1300, 200]
    }
  ],
  "connections": {
    "Entity Update Webhook": {
      "main": [
        [
          {
            "node": "Analyze Dashboard Updates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Dashboard Updates": {
      "main": [
        [
          {
            "node": "Dashboard Generation Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dashboard Generation Agent": {
      "main": [
        [
          {
            "node": "Process Dashboard Configs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dashboard AI Model": {
      "ai_languageModel": [
        [
          {
            "node": "Dashboard Generation Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Process Dashboard Configs": {
      "main": [
        [
          {
            "node": "Store Dashboard Configs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Dashboard Configs": {
      "main": [
        [
          {
            "node": "Trigger Dashboard Refresh",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Dashboard Refresh": {
      "main": [
        [
          {
            "node": "Dashboard Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true
  }
}
