{
  "name": "Kudwa Document Processing with LangExtract",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "process-document",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {
          "binaryData": true
        }
      },
      "id": "document-upload-webhook",
      "name": "Document Upload Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [100, 200]
    },
    {
      "parameters": {
        "jsCode": "// Process uploaded document and prepare for LangExtract\nconst inputData = $input.all()[0];\nconst binaryData = inputData.binary;\nconst jsonData = inputData.json;\n\n// Extract file information\nconst fileInfo = {\n  filename: binaryData.data?.fileName || 'unknown',\n  mimeType: binaryData.data?.mimeType || 'application/octet-stream',\n  fileSize: binaryData.data?.fileSize || 0\n};\n\n// Generate document ID\nfunction generateUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nconst documentId = generateUUID();\n\nreturn [{\n  json: {\n    documentId: documentId,\n    filename: fileInfo.filename,\n    mimeType: fileInfo.mimeType,\n    fileSize: fileInfo.fileSize,\n    uploadedBy: jsonData.body?.user_id || 'system',\n    documentType: jsonData.body?.document_type || 'financial',\n    expectedEntities: jsonData.body?.expected_entities || ['customer', 'payment', 'contract'],\n    processingOptions: {\n      extractEntities: true,\n      updateOntology: true,\n      generateEmbeddings: true,\n      notifyAgents: true\n    },\n    timestamp: new Date().toISOString()\n  },\n  binary: binaryData\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [300, 200],
      "id": "prepare-document-processing",
      "name": "Prepare Document Processing"
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "documents",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.documentId }}",
            "filename": "={{ $json.filename }}",
            "content_type": "={{ $json.mimeType }}",
            "file_size": "={{ $json.fileSize }}",
            "processing_status": "processing",
            "created_at": "={{ $json.timestamp }}"
          }
        },
        "options": {}
      },
      "id": "store-document-metadata",
      "name": "Store Document Metadata",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [500, 200],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-financial",
          "name": "Supabase Financial Account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Simulate LangExtract processing\n// In production, this would call Google's LangExtract API\nconst documentData = $input.all()[0].json;\nconst binaryData = $input.all()[0].binary;\n\n// Mock LangExtract entity extraction\n// This would be replaced with actual LangExtract API calls\nconst mockExtractedEntities = [\n  {\n    entity_type: 'customer',\n    name: 'Acme Corporation',\n    confidence: 0.95,\n    properties: {\n      customer_type: 'corporate',\n      industry: 'manufacturing',\n      contact_email: 'contact@acme.com',\n      annual_revenue: 5000000\n    },\n    source_location: {\n      page: 1,\n      coordinates: [100, 200, 300, 250]\n    }\n  },\n  {\n    entity_type: 'contract',\n    name: 'Service Agreement 2024',\n    confidence: 0.88,\n    properties: {\n      contract_type: 'service_agreement',\n      contract_value: 250000,\n      effective_date: '2024-01-01',\n      expiration_date: '2024-12-31',\n      payment_terms: 'net_30'\n    },\n    source_location: {\n      page: 2,\n      coordinates: [50, 100, 400, 300]\n    }\n  },\n  {\n    entity_type: 'payment',\n    name: 'Monthly Payment Schedule',\n    confidence: 0.92,\n    properties: {\n      payment_type: 'recurring',\n      amount: 20833.33,\n      currency: 'USD',\n      frequency: 'monthly',\n      payment_method: 'ach'\n    },\n    source_location: {\n      page: 3,\n      coordinates: [75, 150, 350, 200]\n    }\n  }\n];\n\n// Mock relationships between entities\nconst extractedRelationships = [\n  {\n    source_entity: 'Acme Corporation',\n    target_entity: 'Service Agreement 2024',\n    relationship_type: 'signs',\n    confidence: 0.90\n  },\n  {\n    source_entity: 'Service Agreement 2024',\n    target_entity: 'Monthly Payment Schedule',\n    relationship_type: 'defines',\n    confidence: 0.85\n  }\n];\n\nreturn [{\n  json: {\n    documentId: documentData.documentId,\n    filename: documentData.filename,\n    extractedEntities: mockExtractedEntities,\n    extractedRelationships: extractedRelationships,\n    processingStatus: 'completed',\n    processingTime: new Date().toISOString(),\n    langextractMetadata: {\n      model_version: 'langextract-v2.1',\n      processing_duration_ms: 2500,\n      total_entities_found: mockExtractedEntities.length,\n      average_confidence: mockExtractedEntities.reduce((sum, e) => sum + e.confidence, 0) / mockExtractedEntities.length\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 200],
      "id": "langextract-processing",
      "name": "LangExtract Processing"
    },
    {
      "parameters": {
        "jsCode": "// Process extracted entities and prepare for ontology updates\nconst extractionData = $input.all()[0].json;\nconst entities = extractionData.extractedEntities;\nconst relationships = extractionData.extractedRelationships;\n\n// Prepare entity insertions for Supabase\nconst entityInserts = entities.map(entity => ({\n  entity_type: entity.entity_type,\n  name: entity.name,\n  properties: entity.properties,\n  metadata: {\n    confidence_score: entity.confidence,\n    source_document_id: extractionData.documentId,\n    source_location: entity.source_location,\n    extracted_by: 'langextract',\n    extraction_timestamp: extractionData.processingTime\n  },\n  confidence_score: entity.confidence,\n  source_document_id: extractionData.documentId,\n  created_by: 'langextract_agent',\n  status: entity.confidence > 0.8 ? 'active' : 'pending_review'\n}));\n\n// Prepare relationship data\nconst relationshipData = relationships.map(rel => ({\n  relationship_type: rel.relationship_type,\n  source_entity_name: rel.source_entity,\n  target_entity_name: rel.target_entity,\n  confidence: rel.confidence,\n  created_by: 'langextract_agent'\n}));\n\nreturn [{\n  json: {\n    documentId: extractionData.documentId,\n    entityInserts: entityInserts,\n    relationshipData: relationshipData,\n    processingMetadata: extractionData.langextractMetadata,\n    ontologyUpdates: {\n      newEntityTypes: [...new Set(entities.map(e => e.entity_type))],\n      newProperties: entities.reduce((acc, entity) => {\n        const entityType = entity.entity_type;\n        if (!acc[entityType]) acc[entityType] = new Set();\n        Object.keys(entity.properties).forEach(prop => acc[entityType].add(prop));\n        return acc;\n      }, {})\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 200],
      "id": "prepare-ontology-updates",
      "name": "Prepare Ontology Updates"
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "entities",
        "columns": {
          "mappingMode": "defineBelow",
          "value": "={{ $json.entityInserts }}"
        },
        "options": {
          "upsert": true
        }
      },
      "id": "insert-extracted-entities",
      "name": "Insert Extracted Entities",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1100, 150],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-financial",
          "name": "Supabase Financial Account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "table": "documents",
        "filterType": "manual",
        "matchingColumns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.documentId }}"
          }
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "processing_status": "completed",
            "extracted_entities": "={{ JSON.stringify($json.entityInserts) }}",
            "processed_at": "={{ new Date().toISOString() }}"
          }
        }
      },
      "id": "update-document-status",
      "name": "Update Document Status",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1100, 250],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-financial",
          "name": "Supabase Financial Account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "http://localhost:8000/api/v1/webhooks/entity-updates",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "event_type",
              "value": "entities_extracted"
            },
            {
              "name": "document_id",
              "value": "={{ $json.documentId }}"
            },
            {
              "name": "new_entities",
              "value": "={{ JSON.stringify($json.entityInserts) }}"
            },
            {
              "name": "ontology_updates",
              "value": "={{ JSON.stringify($json.ontologyUpdates) }}"
            }
          ]
        },
        "options": {}
      },
      "id": "notify-dashboard-agents",
      "name": "Notify Dashboard Agents",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1300, 200],
      "credentials": {
        "httpHeaderAuth": {
          "id": "dashboard-api-auth",
          "name": "Dashboard API Auth"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  success: true,\n  documentId: $json.documentId,\n  entitiesExtracted: $json.entityInserts.length,\n  processingTime: $json.processingMetadata.processing_duration_ms,\n  averageConfidence: $json.processingMetadata.average_confidence,\n  ontologyUpdates: $json.ontologyUpdates\n}) }}",
        "options": {}
      },
      "id": "processing-response",
      "name": "Processing Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1500, 200]
    }
  ],
  "connections": {
    "Document Upload Webhook": {
      "main": [
        [
          {
            "node": "Prepare Document Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Document Processing": {
      "main": [
        [
          {
            "node": "Store Document Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Document Metadata": {
      "main": [
        [
          {
            "node": "LangExtract Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LangExtract Processing": {
      "main": [
        [
          {
            "node": "Prepare Ontology Updates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Ontology Updates": {
      "main": [
        [
          {
            "node": "Insert Extracted Entities",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update Document Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Extracted Entities": {
      "main": [
        [
          {
            "node": "Notify Dashboard Agents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Document Status": {
      "main": [
        [
          {
            "node": "Notify Dashboard Agents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notify Dashboard Agents": {
      "main": [
        [
          {
            "node": "Processing Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true
  }
}
