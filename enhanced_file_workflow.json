{
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "message-field",
              "name": "chatInput",
              "value": "={{ $json.body.message || $json.body.body.message }}",
              "type": "string"
            },
            {
              "id": "session-field", 
              "name": "sessionId",
              "value": "={{ $json.chatId }}",
              "type": "string"
            },
            {
              "id": "file-field",
              "name": "hasFile",
              "value": "={{ $json.body.file_content ? true : false }}",
              "type": "boolean"
            },
            {
              "id": "filename-field",
              "name": "filename",
              "value": "={{ $json.body.filename || '' }}",
              "type": "string"
            },
            {
              "id": "filecontent-field",
              "name": "fileContent",
              "value": "={{ $json.body.file_content || '' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "extract-fields",
      "name": "Extract Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [300, -700]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "9ba11544-5c4e-4f91-818a-08a4ecb596c5",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "id": "webhook-input",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [0, -700],
      "webhookId": "9ba11544-5c4e-4f91-818a-08a4ecb596c5",
      "credentials": {
        "httpHeaderAuth": {
          "id": "DScWd3l3Wbf1qAVD",
          "name": "Header Auth account 3"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Generate UUID and add to data\nfunction generateUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nconst inputData = $input.all()[0].json;\nreturn [{\n  json: {\n    ...inputData,\n    chatId: generateUUID()\n  }\n}];"
      },
      "id": "add-uuid",
      "name": "Add UUID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [150, -700]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-file-condition",
              "leftValue": "={{ $json.hasFile }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-file",
      "name": "Has File?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [450, -700]
    },
    {
      "parameters": {
        "jsCode": "// Process file content - decode base64 and extract text\nconst fileContent = $json.fileContent;\nconst filename = $json.filename;\nconst chatInput = $json.chatInput;\n\nif (!fileContent) {\n  return [{ json: { error: 'No file content provided' } }];\n}\n\ntry {\n  // Decode base64 content\n  const decoded = Buffer.from(fileContent, 'base64').toString('utf-8');\n  \n  // Try to parse as JSON first\n  let parsedContent;\n  let contentType = 'text';\n  \n  try {\n    parsedContent = JSON.parse(decoded);\n    contentType = 'json';\n  } catch {\n    parsedContent = decoded;\n    contentType = 'text';\n  }\n  \n  // Create enhanced prompt for file analysis\n  const enhancedPrompt = `DOCUMENT ANALYSIS REQUEST:\n\nFilename: ${filename}\nContent Type: ${contentType}\nUser Query: ${chatInput}\n\nDocument Content:\n${contentType === 'json' ? JSON.stringify(parsedContent, null, 2) : parsedContent}\n\nPlease analyze this document and:\n1. Extract relevant financial entities (accounts, transactions, amounts, dates)\n2. Propose ontology extensions needed to represent this data\n3. Suggest specific data entries for the database\n4. Identify any data quality issues or missing information`;\n  \n  return [{\n    json: {\n      chatInput: enhancedPrompt,\n      sessionId: $json.sessionId,\n      hasFile: true,\n      filename: filename,\n      contentType: contentType,\n      parsedContent: parsedContent,\n      originalQuery: chatInput\n    }\n  }];\n  \n} catch (error) {\n  return [{\n    json: {\n      error: `Failed to process file: ${error.message}`,\n      chatInput: `Error processing file ${filename}: ${error.message}`,\n      sessionId: $json.sessionId\n    }\n  }];\n}"
      },
      "id": "process-file",
      "name": "Process File",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, -500]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "text-prompt",
              "name": "chatInput",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            },
            {
              "id": "text-session",
              "name": "sessionId",
              "value": "={{ $json.sessionId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "prepare-text",
      "name": "Prepare Text Query",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [600, -900]
    },
    {
      "parameters": {},
      "id": "postgres-memory",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [800, -600],
      "credentials": {
        "postgres": {
          "id": "2VVxWLQMsytxBsoP",
          "name": "Postgres account 4"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a financial ontology extension assistant. Analyze documents and propose structured ontology improvements.\n\n**Instructions:**\n- For documents: Extract entities, suggest ontology extensions, propose data entries\n- For questions: Provide conversational guidance about ontology modeling\n- Always use the exact JSON schema format\n- Be specific and actionable in proposals\n\n**Current Context:** {{ $json.chatInput }}\n\n**Response Requirements:**\n- response: Clear explanation of what you found/recommend\n- response_type: \"ontology_proposal\" for documents, \"conversational\" for questions\n- confidence_score: 0.0-1.0 based on certainty\n- ontology_extensions: Only when you identify missing entity types\n- data_entry_proposals: Only when you can extract concrete data instances",
        "hasOutputParser": true,
        "options": {
          "systemMessage": ""
        }
      },
      "id": "rag-agent",
      "name": "RAG AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [950, -700]
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "retrieve the documents for ontology schema, as well as registers and instances of data.",
        "tableName": {
          "__rl": true,
          "value": "kudwa_documents",
          "mode": "list",
          "cachedResultName": "kudwa_documents"
        },
        "topK": 8,
        "useReranker": true,
        "options": {}
      },
      "id": "vector-store",
      "name": "Supabase Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [1100, -500],
      "credentials": {
        "supabaseApi": {
          "id": "zdmGTcP8j4YeczSW",
          "name": "Supabase account 2"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"response\": {\"type\": \"string\"},\n    \"response_type\": {\"type\": \"string\", \"enum\": [\"conversational\", \"ontology_proposal\"]},\n    \"confidence_score\": {\"type\": \"number\", \"minimum\": 0, \"maximum\": 1},\n    \"ontology_extensions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"entity_type\": {\"type\": \"string\"},\n          \"description\": {\"type\": \"string\"},\n          \"justification\": {\"type\": \"string\"},\n          \"confidence\": {\"type\": \"number\"}\n        },\n        \"required\": [\"entity_type\", \"description\", \"justification\"]\n      }\n    },\n    \"data_entry_proposals\": {\n      \"type\": \"array\", \n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"entity_type\": {\"type\": \"string\"},\n          \"proposed_data\": {\"type\": \"object\"},\n          \"confidence\": {\"type\": \"number\"}\n        },\n        \"required\": [\"entity_type\", \"proposed_data\"]\n      }\n    }\n  },\n  \"required\": [\"response\", \"response_type\", \"confidence_score\"]\n}",
        "autoFix": true
      },
      "id": "output-parser",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [1300, -500]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-sonnet-4-20250514",
          "mode": "list",
          "cachedResultName": "Claude Sonnet 4"
        },
        "options": {
          "thinking": true
        }
      },
      "id": "anthropic-model",
      "name": "Anthropic Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [750, -400],
      "credentials": {
        "anthropicApi": {
          "id": "vOwbREMQUDYto4mh",
          "name": "Anthropic account 4"
        }
      }
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {}
      },
      "id": "openai-embeddings",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [1150, -300],
      "credentials": {
        "openAiApi": {
          "id": "TctyBnpNOos3qcr5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "webhook-response",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [1200, -700]
    }
  ],
  "connections": {
    "webhook-input": {
      "main": [
        [
          {
            "node": "add-uuid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "add-uuid": {
      "main": [
        [
          {
            "node": "extract-fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract-fields": {
      "main": [
        [
          {
            "node": "check-file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-file": {
      "main": [
        [
          {
            "node": "process-file",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "prepare-text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-file": {
      "main": [
        [
          {
            "node": "rag-agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare-text": {
      "main": [
        [
          {
            "node": "rag-agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "rag-agent": {
      "main": [
        [
          {
            "node": "webhook-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "postgres-memory": {
      "ai_memory": [
        [
          {
            "node": "rag-agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "vector-store": {
      "ai_tool": [
        [
          {
            "node": "rag-agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "output-parser": {
      "ai_outputParser": [
        [
          {
            "node": "rag-agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "anthropic-model": {
      "ai_languageModel": [
        [
          {
            "node": "rag-agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "openai-embeddings": {
      "ai_embedding": [
        [
          {
            "node": "vector-store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    }
  }
}
