{
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "message-field",
              "name": "chatInput",
              "value": "={{ $json.body.message || $json.body.body.message }}",
              "type": "string"
            },
            {
              "id": "session-field",
              "name": "sessionId",
              "value": "={{ $json.chatId }}",
              "type": "string"
            },
            {
              "id": "file-field",
              "name": "hasFile",
              "value": "={{ $json.body.file_content ? true : false }}",
              "type": "boolean"
            },
            {
              "id": "filename-field",
              "name": "filename",
              "value": "={{ $json.body.filename || '' }}",
              "type": "string"
            },
            {
              "id": "filecontent-field",
              "name": "fileContent",
              "value": "={{ $json.body.file_content || '' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "140533b5-3809-4a56-add4-158957164ea8",
      "name": "Extract Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [2880, -464]
    },
    {
      "parameters": {
        "jsCode": "function generateUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nconst inputData = $input.all()[0].json;\nreturn [{\n  json: {\n    ...inputData,\n    chatId: generateUUID()\n  }\n}];"
      },
      "id": "76236a21-fd83-4e3d-9ec4-ce07ffa78f68",
      "name": "Add UUID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3104, -464]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "has-file-condition",
              "leftValue": "={{ $json.hasFile }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "35060ed4-f011-404e-a150-2e170adf6ae4",
      "name": "Has File?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [3328, -464]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "9ba11544-5c4e-4f91-818a-08a4ecb596c5",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "c0796cc2-846e-41a5-95e5-a422d322d79e",
      "name": "Webhook1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [2432, -464],
      "webhookId": "9ba11544-5c4e-4f91-818a-08a4ecb596c5",
      "credentials": {
        "httpHeaderAuth": {
          "id": "DScWd3l3Wbf1qAVD",
          "name": "Header Auth account 3"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Generate a proper UUID v4\nfunction generateUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n// Add chatId to the existing data\nconst inputData = $input.all()[0].json;\nreturn [{\n  json: {\n    ...inputData,\n    chatId: generateUUID()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2656, -464],
      "id": "4c9d724a-a72d-4d34-ae44-c7d3ef3c8afa",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "const fileContent = $json.fileContent;\nconst filename = $json.filename;\nconst chatInput = $json.chatInput;\n\nif (!fileContent) {\n  return [{ json: { error: 'No file content provided' } }];\n}\n\ntry {\n  const decoded = Buffer.from(fileContent, 'base64').toString('utf-8');\n  \n  let parsedContent;\n  let contentType = 'text';\n  \n  try {\n    parsedContent = JSON.parse(decoded);\n    contentType = 'json';\n  } catch {\n    parsedContent = decoded;\n    contentType = 'text';\n  }\n  \n  const enhancedPrompt = `DOCUMENT ANALYSIS REQUEST:\n\nFilename: ${filename}\nContent Type: ${contentType}\nUser Query: ${chatInput}\n\nDocument Content:\n${contentType === 'json' ? JSON.stringify(parsedContent, null, 2) : parsedContent}\n\nPlease analyze this document and:\n1. Extract relevant financial entities (accounts, transactions, amounts, dates)\n2. Propose ontology extensions needed to represent this data\n3. Suggest specific data entries for the database\n4. Identify any data quality issues or missing information`;\n  \n  return [{\n    json: {\n      chatInput: enhancedPrompt,\n      sessionId: $json.sessionId,\n      hasFile: true,\n      filename: filename,\n      contentType: contentType,\n      parsedContent: parsedContent,\n      originalQuery: chatInput\n    }\n  }];\n  \n} catch (error) {\n  return [{\n    json: {\n      error: `Failed to process file: ${error.message}`,\n      chatInput: `Error processing file ${filename}: ${error.message}`,\n      sessionId: $json.sessionId\n    }\n  }];\n}"
      },
      "id": "2e770dc6-7119-4dd3-a298-963d36883023",
      "name": "Process File",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3552, -368]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "text-prompt",
              "name": "chatInput",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            },
            {
              "id": "text-session",
              "name": "sessionId",
              "value": "={{ $json.sessionId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "51c19361-2776-4a97-96cd-e7e9622a0306",
      "name": "Prepare Text Query",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [3552, -560]
    },
    {
      "parameters": {},
      "id": "f72becaf-ceba-4b4f-8762-d72f29405da8",
      "name": "Postgres Chat Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1,
      "position": [3904, -240],
      "notesInFlow": false,
      "credentials": {
        "postgres": {
          "id": "2VVxWLQMsytxBsoP",
          "name": "Postgres account 4"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a financial ontology extension assistant. Analyze documents and propose structured ontology improvements.\n\n**Instructions:**\n- For documents: Extract entities, suggest ontology extensions, propose data entries\n- For questions: Provide conversational guidance about ontology modeling\n- Always return valid JSON matching the exact schema\n- Be specific and actionable in proposals\n\n**Current Context:** {{ $json.chatInput }}\n\n**Response Requirements:**\n- response: Clear explanation of what you found/recommend\n- response_type: \"ontology_proposal\" for documents, \"conversational\" for questions  \n- confidence_score: 0.0-1.0 based on certainty\n- ontology_extensions: Array of missing entity types (empty array [] if none)\n- data_entry_proposals: Array of concrete data instances (empty array [] if none)\n\n**Important:** Always include ontology_extensions and data_entry_proposals as arrays, even if empty.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": ""
        }
      },
      "id": "719fddc4-d449-4947-b3ca-bdddbed5e486",
      "name": "RAG AI Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [3936, -464]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [4688, -464],
      "id": "5a07d4ae-1573-4e60-8664-2fc97df4f97f",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.rerankerCohere",
      "typeVersion": 1,
      "position": [4192, -32],
      "id": "a22ff405-d5a7-4830-a4cb-6fb732ace89b",
      "name": "Reranker Cohere1",
      "credentials": {
        "cohereApi": {
          "id": "AfV4LAECYQlgK7Gy",
          "name": "CohereApi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "retrieve the documents for ontology schema, as well as registers and instances of data.",
        "tableName": {
          "__rl": true,
          "value": "kudwa_documents",
          "mode": "list",
          "cachedResultName": "kudwa_documents"
        },
        "topK": 8,
        "useReranker": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [4032, -240],
      "id": "cd849684-d177-448f-bb00-b00384e7347b",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "zdmGTcP8j4YeczSW",
          "name": "Supabase account 2"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"response\": {\"type\": \"string\"},\n    \"response_type\": {\"type\": \"string\", \"enum\": [\"conversational\", \"ontology_proposal\"]},\n    \"confidence_score\": {\"type\": \"number\", \"minimum\": 0, \"maximum\": 1},\n    \"ontology_extensions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"entity_type\": {\"type\": \"string\"},\n          \"description\": {\"type\": \"string\"},\n          \"justification\": {\"type\": \"string\"},\n          \"confidence\": {\"type\": \"number\", \"minimum\": 0, \"maximum\": 1}\n        },\n        \"required\": [\"entity_type\", \"description\", \"justification\"]\n      },\n      \"default\": []\n    },\n    \"data_entry_proposals\": {\n      \"type\": \"array\", \n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"entity_type\": {\"type\": \"string\"},\n          \"proposed_data\": {\"type\": \"object\"},\n          \"confidence\": {\"type\": \"number\", \"minimum\": 0, \"maximum\": 1}\n        },\n        \"required\": [\"entity_type\", \"proposed_data\"]\n      },\n      \"default\": []\n    }\n  },\n  \"required\": [\"response\", \"response_type\", \"confidence_score\"]\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [4320, -240],
      "id": "aa4e4338-c34a-415d-97ee-70b40649ea2d",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-sonnet-4-20250514",
          "mode": "list",
          "cachedResultName": "Claude Sonnet 4"
        },
        "options": {
          "thinking": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [3776, -240],
      "id": "90289d7d-5616-4502-a55a-2894d8e0ea16",
      "name": "Anthropic Chat Model2",
      "credentials": {
        "anthropicApi": {
          "id": "vOwbREMQUDYto4mh",
          "name": "Anthropic account 4"
        }
      }
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [4048, -32],
      "id": "ae52c260-7bf0-4c0f-81f3-4917262b3161",
      "name": "Embeddings OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "TctyBnpNOos3qcr5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude 4 Sonnet"
        },
        "options": {
          "thinking": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [4400, -32],
      "id": "a36c2f39-30d7-446c-b5d6-c796eb172cce",
      "name": "Anthropic Chat Model3",
      "credentials": {
        "anthropicApi": {
          "id": "vOwbREMQUDYto4mh",
          "name": "Anthropic account 4"
        }
      }
    }
  ],
  "connections": {
    "Extract Fields": {
      "main": [
        [
          {
            "node": "Add UUID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add UUID": {
      "main": [
        [
          {
            "node": "Has File?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has File?": {
      "main": [
        [
          {
            "node": "Process File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Text Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process File": {
      "main": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Text Query": {
      "main": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RAG AI Agent1": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Extract Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reranker Cohere1": {
      "ai_reranker": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_reranker",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7b231313465b4b56abc040e1ee6699b89ffde13a1618d023c42b1ed91cd395de"
  }
}
